# -*- coding: utf-8 -*-
"""ml_assgn1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1479OoYrK3lcCwxqglwtFNQ5VolRQx2Ea
"""

import numpy as np

arr = np.array([1, 2, 3, 6, 4, 5])
print("Q1 (a):", arr[::-1])

array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
print("Q1 (b) flatten method 1:", array1.flatten())
print("Q1 (b) flatten method 2:", array1.ravel())

arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])
print("Q1 (c) arrays equal:", np.array_equal(arr1, arr2))

x = np.array([1,2,3,4,5,1,2,1,1,1])
values, counts = np.unique(x, return_counts=True)
most_freq_val_x = values[np.argmax(counts)]
indices_x = np.where(x == most_freq_val_x)[0]
print("Q1 (d)(i) most frequent value:", most_freq_val_x)
print("Q1 (d)(i) indices:", indices_x)

y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3])
values, counts = np.unique(y, return_counts=True)
most_freq_val_y = values[np.argmax(counts)]
indices_y = np.where(y == most_freq_val_y)[0]
print("Q1 (d)(ii) most frequent value:", most_freq_val_y)
print("Q1 (d)(ii) indices:", indices_y)

gfg = np.matrix('[4,1,9;12,3,1;4,5,6]')
print("Q1 (e)(i) sum all:", np.sum(gfg))
print("Q1 (e)(ii) sum row-wise:", np.sum(gfg, axis=1))
print("Q1 (e)(iii) sum column-wise:", np.sum(gfg, axis=0))

n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])
print("Q1 (f)(i) sum diagonal:", np.trace(n_array))
eig_vals, eig_vecs = np.linalg.eig(n_array)
print("Q1 (f)(ii) eigenvalues:", eig_vals)
print("Q1 (f)(iii) eigenvectors:\n", eig_vecs)
print("Q1 (f)(iv) inverse matrix:\n", np.linalg.inv(n_array))
print("Q1 (f)(v) determinant:", np.linalg.det(n_array))

p1 = np.array([[1, 2], [2, 3]])
q1 = np.array([[4, 5], [6, 7]])
mul1 = np.dot(p1, q1)
cov1 = np.cov(p1.flatten(), q1.flatten())
print("Q1 (g)(i) multiplication:\n", mul1)
print("Q1 (g)(i) covariance:\n", cov1)

p2 = np.array([[1, 2], [2, 3], [4, 5]])
q2 = np.array([[4, 5, 1], [6, 7, 2]])
mul2 = np.dot(p2, q2)
cov2 = np.cov(p2.flatten(), q2.flatten())
print("Q1 (g)(ii) multiplication:\n", mul2)
print("Q1 (g)(ii) covariance:\n", cov2)

x_mat = np.array([[2, 3, 4], [3, 2, 9]])
y_mat = np.array([[1, 5, 0], [5, 10, 3]])
inner = np.inner(x_mat, y_mat)
outer = np.outer(x_mat, y_mat)
cartesian = np.array(np.meshgrid(x_mat, y_mat)).T.reshape(-1, 2)
print("Q1 (h) inner product:\n", inner)
print("Q1 (h) outer product:\n", outer)
print("Q1 (h) cartesian product:\n", cartesian)

import numpy as np

array = np.array([[1, -2, 3], [-4, 5, -6]])
print("Q2 (a)(i) absolute values:\n", np.abs(array))
flat = array.flatten()
print("Q2 (a)(ii) percentiles of flattened array:", np.percentile(flat, [25, 50, 75]))
print("Q2 (a)(ii) percentiles for each column:\n", np.percentile(array, [25, 50, 75], axis=0))
print("Q2 (a)(ii) percentiles for each row:\n", np.percentile(array, [25, 50, 75], axis=1))
print("Q2 (a)(iii) mean, median, std of flattened array:", np.mean(flat), np.median(flat), np.std(flat))
print("Q2 (a)(iii) mean, median, std of each column:")
print(np.mean(array, axis=0), np.median(array, axis=0), np.std(array, axis=0))
print("Q2 (a)(iii) mean, median, std of each row:")
print(np.mean(array, axis=1), np.median(array, axis=1), np.std(array, axis=1))

a = np.array([-1.8, -1.6, -0.5, 0.5, 1.6, 1.8, 3.0])
print("Q2 (b) floor:", np.floor(a))
print("Q2 (b) ceiling:", np.ceil(a))
print("Q2 (b) truncated:", np.trunc(a))
print("Q2 (b) rounded:", np.round(a))

import numpy as np

array_q3 = np.array([10, 52, 62, 16, 16, 54, 453])
print("Q3 (a)(i) sorted array:", np.sort(array_q3))
print("Q3 (a)(ii) indices of sorted array:", np.argsort(array_q3))
print("Q3 (a)(iii) 4 smallest elements:", np.partition(array_q3, 3)[:4])
print("Q3 (a)(iv) 5 largest elements:", np.partition(array_q3, -5)[-5:])

array_q3_b = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
ints = array_q3_b[array_q3_b == array_q3_b.astype(int)]
floats = array_q3_b[array_q3_b != array_q3_b.astype(int)]
print("Q3 (b)(i) integer elements only:", ints)
print("Q3 (b)(ii) float elements only:", floats)